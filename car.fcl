FUNCTION_BLOCK car
VAR_INPUT
left_sensor : REAL;
right_sensor : REAL;
front_sensor : REAL;
END_VAR

VAR_OUTPUT
direction_change : REAL;
END_VAR

FUZZIFY left_sensor
TERM close := (0, 1) (0.5, 1) (0.8, 0.50) (1.2, 0);
TERM medium := (0.5, 0) (0.8, 0.50) (1.2, 1) (2.5, 1) (3.5, 0.50) (4, 0);
TERM far := (2.5, 0) (3.5, 0.5) (4, 1) (6, 1);
END_FUZZIFY

FUZZIFY right_sensor
TERM close := (0, 1) (0.5, 1) (0.8, 0.50) (1.2, 0);
TERM medium := (0.5, 0) (0.8, 0.50) (1.2, 1) (2.5, 1) (3.5, 0.50) (4, 0);
TERM far := (2.5, 0) (3.5, 0.5) (4, 1) (6, 1);
END_FUZZIFY

FUZZIFY front_sensor
TERM close := (0, 1) (2.5, 1) (4, 0.50) (6, 0);
TERM medium := (2.5, 0) (4, 0.50) (6, 1) (12, 1) (16, 0.5) (18, 0);
TERM far := (12, 0) (16, 0.5) (18, 1) (25, 1);
END_FUZZIFY

DEFUZZIFY direction_change
TERM strong_left := (-2, 1) (-1.5, 1) (-1.25, 0.50) (-1, 0);
TERM left := (-1.5, 0) (-1.25, 0.50) (-1, 1) (-0.25, 1) (-0.1, 0.50) (0, 0);
TERM no_change := (-0.25, 0) (-0.1, 0.5) (0, 1) (0.1, 0.50) (0.25, 0);
TERM right := (0, 0) (0.1, 0.50) (0.25, 1) (1, 1) (1.25, 0.50) (1.5, 0);
TERM strong_right := (1, 0) (1.25, 0.50) (1.5, 1) (2, 1);
METHOD : COG;
DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK first
AND: MIN;
ACT: PROD;

RULE 0: IF front_sensor IS close AND left_sensor IS close AND right_sensor IS far THEN direction_change IS strong_right;
RULE 1: IF front_sensor IS close AND left_sensor IS close AND right_sensor IS medium THEN direction_change IS right;
RULE 2: IF front_sensor IS close AND left_sensor IS close AND right_sensor IS close THEN direction_change IS no_change;

RULE 3: IF front_sensor IS close AND left_sensor IS medium AND right_sensor IS far THEN direction_change IS strong_right;
RULE 4: IF front_sensor IS close AND left_sensor IS medium AND right_sensor is medium THEN direction_change IS strong_left;
RULE 5: IF front_sensor IS close AND left_sensor IS medium AND right_sensor is close THEN direction_change IS left;

RULE 6: IF front_sensor IS close AND left_sensor IS far AND right_sensor IS far THEN direction_change IS strong_left;
RULE 7: IF front_sensor IS close AND left_sensor IS far AND right_sensor is medium THEN direction_change IS strong_right;
RULE 8: IF front_sensor IS close AND left_sensor IS far AND right_sensor is close THEN direction_change IS strong_left;

RULE 9: IF front_sensor IS medium AND left_sensor IS close AND right_sensor IS far THEN direction_change IS right;
RULE 10: IF front_sensor IS medium AND left_sensor IS close AND right_sensor IS medium THEN direction_change IS right;
RULE 11: IF front_sensor IS medium AND left_sensor IS close AND right_sensor IS close THEN direction_change IS no_change;

RULE 12: IF front_sensor IS medium AND left_sensor IS medium AND right_sensor IS far THEN direction_change IS right;
RULE 13: IF front_sensor IS medium AND left_sensor IS medium AND right_sensor IS medium THEN direction_change IS right;
RULE 14: IF front_sensor IS medium AND left_sensor IS medium AND right_sensor IS close THEN direction_change IS left;

RULE 15: IF front_sensor IS medium AND left_sensor IS far AND right_sensor IS far THEN direction_change IS left;
RULE 16: IF front_sensor IS medium AND left_sensor IS far AND right_sensor IS medium THEN direction_change IS left;
RULE 17: IF front_sensor IS medium AND left_sensor IS far AND right_sensor IS close THEN direction_change IS left;

RULE 18: IF front_sensor IS far THEN direction_change IS no_change;

END_RULEBLOCK

END_FUNCTION_BLOCK
